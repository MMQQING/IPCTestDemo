// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IPCMessage.proto

#include "IPCMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace IM {
PROTOBUF_CONSTEXPR Amessage::Amessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.testname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.timeout_)*/0u
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.data_length_)*/0u
  , /*decltype(_impl_.data_check_)*/0u
  , /*decltype(_impl_.reserved_)*/0u
  , /*decltype(_impl_.msg_check_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AmessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AmessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AmessageDefaultTypeInternal() {}
  union {
    Amessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AmessageDefaultTypeInternal _Amessage_default_instance_;
PROTOBUF_CONSTEXPR info_s::info_s(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct info_sDefaultTypeInternal {
  PROTOBUF_CONSTEXPR info_sDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~info_sDefaultTypeInternal() {}
  union {
    info_s _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 info_sDefaultTypeInternal _info_s_default_instance_;
PROTOBUF_CONSTEXPR deviceinfo::deviceinfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_.num_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct deviceinfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR deviceinfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~deviceinfoDefaultTypeInternal() {}
  union {
    deviceinfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 deviceinfoDefaultTypeInternal _deviceinfo_default_instance_;
PROTOBUF_CONSTEXPR Apacket::Apacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApacketDefaultTypeInternal() {}
  union {
    Apacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApacketDefaultTypeInternal _Apacket_default_instance_;
}  // namespace IM
static ::_pb::Metadata file_level_metadata_IPCMessage_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_IPCMessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_IPCMessage_2eproto = nullptr;

const uint32_t TableStruct_IPCMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.testname_),
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.data_length_),
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.data_check_),
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::IM::Amessage, _impl_.msg_check_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::info_s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::info_s, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::IM::info_s, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::deviceinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::deviceinfo, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::IM::deviceinfo, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IM::Apacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IM::Apacket, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::IM::Apacket, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::IM::Amessage)},
  { 17, -1, -1, sizeof(::IM::info_s)},
  { 25, -1, -1, sizeof(::IM::deviceinfo)},
  { 33, -1, -1, sizeof(::IM::Apacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::IM::_Amessage_default_instance_._instance,
  &::IM::_info_s_default_instance_._instance,
  &::IM::_deviceinfo_default_instance_._instance,
  &::IM::_Apacket_default_instance_._instance,
};

const char descriptor_table_protodef_IPCMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020IPCMessage.proto\022\002IM\"\307\001\n\010Amessage\022\017\n\007c"
  "ommand\030\001 \001(\r\022\020\n\010testname\030\002 \001(\t\022\017\n\007versio"
  "n\030\003 \001(\t\022\014\n\004type\030\004 \001(\r\022\016\n\006result\030\005 \001(\t\022\017\n"
  "\007timeout\030\006 \001(\r\022\n\n\002id\030\007 \001(\r\022\023\n\013data_lengt"
  "h\030\010 \001(\r\022\022\n\ndata_check\030\t \001(\r\022\020\n\010reserved\030"
  "\n \001(\r\022\021\n\tmsg_check\030\013 \001(\r\"%\n\006info_s\022\014\n\004na"
  "me\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"4\n\ndeviceinfo\022\013\n"
  "\003num\030\001 \001(\r\022\031\n\005value\030\002 \003(\0132\n.IM.info_s\"B\n"
  "\007Apacket\022\031\n\003msg\030\001 \001(\0132\014.IM.Amessage\022\034\n\004d"
  "ata\030\002 \001(\0132\016.IM.deviceinfob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_IPCMessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_IPCMessage_2eproto = {
    false, false, 393, descriptor_table_protodef_IPCMessage_2eproto,
    "IPCMessage.proto",
    &descriptor_table_IPCMessage_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_IPCMessage_2eproto::offsets,
    file_level_metadata_IPCMessage_2eproto, file_level_enum_descriptors_IPCMessage_2eproto,
    file_level_service_descriptors_IPCMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_IPCMessage_2eproto_getter() {
  return &descriptor_table_IPCMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_IPCMessage_2eproto(&descriptor_table_IPCMessage_2eproto);
namespace IM {

// ===================================================================

class Amessage::_Internal {
 public:
};

Amessage::Amessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Amessage)
}
Amessage::Amessage(const Amessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Amessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.testname_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.timeout_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.data_length_){}
    , decltype(_impl_.data_check_){}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.msg_check_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.testname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testname().empty()) {
    _this->_impl_.testname_.Set(from._internal_testname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.command_, &from._impl_.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msg_check_) -
    reinterpret_cast<char*>(&_impl_.command_)) + sizeof(_impl_.msg_check_));
  // @@protoc_insertion_point(copy_constructor:IM.Amessage)
}

inline void Amessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.testname_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.command_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.timeout_){0u}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.data_length_){0u}
    , decltype(_impl_.data_check_){0u}
    , decltype(_impl_.reserved_){0u}
    , decltype(_impl_.msg_check_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.testname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Amessage::~Amessage() {
  // @@protoc_insertion_point(destructor:IM.Amessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Amessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.testname_.Destroy();
  _impl_.version_.Destroy();
  _impl_.result_.Destroy();
}

void Amessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Amessage::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Amessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.testname_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.result_.ClearToEmpty();
  ::memset(&_impl_.command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.msg_check_) -
      reinterpret_cast<char*>(&_impl_.command_)) + sizeof(_impl_.msg_check_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Amessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string testname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_testname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "IM.Amessage.testname"));
        } else
          goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "IM.Amessage.version"));
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "IM.Amessage.result"));
        } else
          goto handle_unusual;
        continue;
      // uint32 timeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_length = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.data_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_check = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.data_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reserved = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_check = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.msg_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Amessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Amessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 command = 1;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_command(), target);
  }

  // string testname = 2;
  if (!this->_internal_testname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testname().data(), static_cast<int>(this->_internal_testname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Amessage.testname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_testname(), target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Amessage.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // string result = 5;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Amessage.result");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_result(), target);
  }

  // uint32 timeout = 6;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timeout(), target);
  }

  // uint32 id = 7;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_id(), target);
  }

  // uint32 data_length = 8;
  if (this->_internal_data_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_data_length(), target);
  }

  // uint32 data_check = 9;
  if (this->_internal_data_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_data_check(), target);
  }

  // uint32 reserved = 10;
  if (this->_internal_reserved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_reserved(), target);
  }

  // uint32 msg_check = 11;
  if (this->_internal_msg_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_msg_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Amessage)
  return target;
}

size_t Amessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Amessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string testname = 2;
  if (!this->_internal_testname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testname());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string result = 5;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // uint32 command = 1;
  if (this->_internal_command() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_command());
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 timeout = 6;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout());
  }

  // uint32 id = 7;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 data_length = 8;
  if (this->_internal_data_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_length());
  }

  // uint32 data_check = 9;
  if (this->_internal_data_check() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_check());
  }

  // uint32 reserved = 10;
  if (this->_internal_reserved() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reserved());
  }

  // uint32 msg_check = 11;
  if (this->_internal_msg_check() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_check());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Amessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Amessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Amessage::GetClassData() const { return &_class_data_; }


void Amessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Amessage*>(&to_msg);
  auto& from = static_cast<const Amessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Amessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_testname().empty()) {
    _this->_internal_set_testname(from._internal_testname());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_data_length() != 0) {
    _this->_internal_set_data_length(from._internal_data_length());
  }
  if (from._internal_data_check() != 0) {
    _this->_internal_set_data_check(from._internal_data_check());
  }
  if (from._internal_reserved() != 0) {
    _this->_internal_set_reserved(from._internal_reserved());
  }
  if (from._internal_msg_check() != 0) {
    _this->_internal_set_msg_check(from._internal_msg_check());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Amessage::CopyFrom(const Amessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Amessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Amessage::IsInitialized() const {
  return true;
}

void Amessage::InternalSwap(Amessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testname_, lhs_arena,
      &other->_impl_.testname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Amessage, _impl_.msg_check_)
      + sizeof(Amessage::_impl_.msg_check_)
      - PROTOBUF_FIELD_OFFSET(Amessage, _impl_.command_)>(
          reinterpret_cast<char*>(&_impl_.command_),
          reinterpret_cast<char*>(&other->_impl_.command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Amessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IPCMessage_2eproto_getter, &descriptor_table_IPCMessage_2eproto_once,
      file_level_metadata_IPCMessage_2eproto[0]);
}

// ===================================================================

class info_s::_Internal {
 public:
};

info_s::info_s(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.info_s)
}
info_s::info_s(const info_s& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  info_s* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IM.info_s)
}

inline void info_s::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

info_s::~info_s() {
  // @@protoc_insertion_point(destructor:IM.info_s)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void info_s::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void info_s::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void info_s::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.info_s)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* info_s::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "IM.info_s.name"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "IM.info_s.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* info_s::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.info_s)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.info_s.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.info_s.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.info_s)
  return target;
}

size_t info_s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.info_s)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData info_s::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    info_s::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*info_s::GetClassData() const { return &_class_data_; }


void info_s::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<info_s*>(&to_msg);
  auto& from = static_cast<const info_s&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.info_s)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void info_s::CopyFrom(const info_s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.info_s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool info_s::IsInitialized() const {
  return true;
}

void info_s::InternalSwap(info_s* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata info_s::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IPCMessage_2eproto_getter, &descriptor_table_IPCMessage_2eproto_once,
      file_level_metadata_IPCMessage_2eproto[1]);
}

// ===================================================================

class deviceinfo::_Internal {
 public:
};

deviceinfo::deviceinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.deviceinfo)
}
deviceinfo::deviceinfo(const deviceinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  deviceinfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_ = from._impl_.num_;
  // @@protoc_insertion_point(copy_constructor:IM.deviceinfo)
}

inline void deviceinfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , decltype(_impl_.num_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

deviceinfo::~deviceinfo() {
  // @@protoc_insertion_point(destructor:IM.deviceinfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void deviceinfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void deviceinfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void deviceinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.deviceinfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _impl_.num_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deviceinfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.info_s value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* deviceinfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.deviceinfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num = 1;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num(), target);
  }

  // repeated .IM.info_s value = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.deviceinfo)
  return target;
}

size_t deviceinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.deviceinfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.info_s value = 2;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 num = 1;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData deviceinfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    deviceinfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*deviceinfo::GetClassData() const { return &_class_data_; }


void deviceinfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<deviceinfo*>(&to_msg);
  auto& from = static_cast<const deviceinfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.deviceinfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void deviceinfo::CopyFrom(const deviceinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.deviceinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deviceinfo::IsInitialized() const {
  return true;
}

void deviceinfo::InternalSwap(deviceinfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  swap(_impl_.num_, other->_impl_.num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata deviceinfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IPCMessage_2eproto_getter, &descriptor_table_IPCMessage_2eproto_once,
      file_level_metadata_IPCMessage_2eproto[2]);
}

// ===================================================================

class Apacket::_Internal {
 public:
  static const ::IM::Amessage& msg(const Apacket* msg);
  static const ::IM::deviceinfo& data(const Apacket* msg);
};

const ::IM::Amessage&
Apacket::_Internal::msg(const Apacket* msg) {
  return *msg->_impl_.msg_;
}
const ::IM::deviceinfo&
Apacket::_Internal::data(const Apacket* msg) {
  return *msg->_impl_.data_;
}
Apacket::Apacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Apacket)
}
Apacket::Apacket(const Apacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Apacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    _this->_impl_.msg_ = new ::IM::Amessage(*from._impl_.msg_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::IM::deviceinfo(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:IM.Apacket)
}

inline void Apacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Apacket::~Apacket() {
  // @@protoc_insertion_point(destructor:IM.Apacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Apacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.msg_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void Apacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Apacket::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Apacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.msg_ != nullptr) {
    delete _impl_.msg_;
  }
  _impl_.msg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Apacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IM.Amessage msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.deviceinfo data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Apacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Apacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IM.Amessage msg = 1;
  if (this->_internal_has_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  // .IM.deviceinfo data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Apacket)
  return target;
}

size_t Apacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Apacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IM.Amessage msg = 1;
  if (this->_internal_has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msg_);
  }

  // .IM.deviceinfo data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Apacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Apacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Apacket::GetClassData() const { return &_class_data_; }


void Apacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Apacket*>(&to_msg);
  auto& from = static_cast<const Apacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Apacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _this->_internal_mutable_msg()->::IM::Amessage::MergeFrom(
        from._internal_msg());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::IM::deviceinfo::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Apacket::CopyFrom(const Apacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Apacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Apacket::IsInitialized() const {
  return true;
}

void Apacket::InternalSwap(Apacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Apacket, _impl_.data_)
      + sizeof(Apacket::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(Apacket, _impl_.msg_)>(
          reinterpret_cast<char*>(&_impl_.msg_),
          reinterpret_cast<char*>(&other->_impl_.msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Apacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IPCMessage_2eproto_getter, &descriptor_table_IPCMessage_2eproto_once,
      file_level_metadata_IPCMessage_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::Amessage*
Arena::CreateMaybeMessage< ::IM::Amessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Amessage >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::info_s*
Arena::CreateMaybeMessage< ::IM::info_s >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::info_s >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::deviceinfo*
Arena::CreateMaybeMessage< ::IM::deviceinfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::deviceinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Apacket*
Arena::CreateMaybeMessage< ::IM::Apacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Apacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
