// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IPCMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IPCMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IPCMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IPCMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IPCMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IPCMessage_2eproto;
namespace IM {
class Amessage;
struct AmessageDefaultTypeInternal;
extern AmessageDefaultTypeInternal _Amessage_default_instance_;
class Apacket;
struct ApacketDefaultTypeInternal;
extern ApacketDefaultTypeInternal _Apacket_default_instance_;
class deviceinfo;
struct deviceinfoDefaultTypeInternal;
extern deviceinfoDefaultTypeInternal _deviceinfo_default_instance_;
class info_s;
struct info_sDefaultTypeInternal;
extern info_sDefaultTypeInternal _info_s_default_instance_;
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Amessage* Arena::CreateMaybeMessage<::IM::Amessage>(Arena*);
template<> ::IM::Apacket* Arena::CreateMaybeMessage<::IM::Apacket>(Arena*);
template<> ::IM::deviceinfo* Arena::CreateMaybeMessage<::IM::deviceinfo>(Arena*);
template<> ::IM::info_s* Arena::CreateMaybeMessage<::IM::info_s>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {

// ===================================================================

class Amessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Amessage) */ {
 public:
  inline Amessage() : Amessage(nullptr) {}
  ~Amessage() override;
  explicit PROTOBUF_CONSTEXPR Amessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Amessage(const Amessage& from);
  Amessage(Amessage&& from) noexcept
    : Amessage() {
    *this = ::std::move(from);
  }

  inline Amessage& operator=(const Amessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Amessage& operator=(Amessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Amessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Amessage* internal_default_instance() {
    return reinterpret_cast<const Amessage*>(
               &_Amessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Amessage& a, Amessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Amessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Amessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Amessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Amessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Amessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Amessage& from) {
    Amessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Amessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Amessage";
  }
  protected:
  explicit Amessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestnameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kCommandFieldNumber = 1,
    kTypeFieldNumber = 4,
    kResultFieldNumber = 5,
    kTimeoutFieldNumber = 6,
    kIdFieldNumber = 7,
    kDataLengthFieldNumber = 8,
    kDataCheckFieldNumber = 9,
    kReservedFieldNumber = 10,
    kMsgCheckFieldNumber = 11,
  };
  // string testname = 2;
  void clear_testname();
  const std::string& testname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testname();
  PROTOBUF_NODISCARD std::string* release_testname();
  void set_allocated_testname(std::string* testname);
  private:
  const std::string& _internal_testname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testname(const std::string& value);
  std::string* _internal_mutable_testname();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // uint32 command = 1;
  void clear_command();
  uint32_t command() const;
  void set_command(uint32_t value);
  private:
  uint32_t _internal_command() const;
  void _internal_set_command(uint32_t value);
  public:

  // uint32 type = 4;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 result = 5;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // uint32 timeout = 6;
  void clear_timeout();
  uint32_t timeout() const;
  void set_timeout(uint32_t value);
  private:
  uint32_t _internal_timeout() const;
  void _internal_set_timeout(uint32_t value);
  public:

  // uint32 id = 7;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 data_length = 8;
  void clear_data_length();
  uint32_t data_length() const;
  void set_data_length(uint32_t value);
  private:
  uint32_t _internal_data_length() const;
  void _internal_set_data_length(uint32_t value);
  public:

  // uint32 data_check = 9;
  void clear_data_check();
  uint32_t data_check() const;
  void set_data_check(uint32_t value);
  private:
  uint32_t _internal_data_check() const;
  void _internal_set_data_check(uint32_t value);
  public:

  // uint32 reserved = 10;
  void clear_reserved();
  uint32_t reserved() const;
  void set_reserved(uint32_t value);
  private:
  uint32_t _internal_reserved() const;
  void _internal_set_reserved(uint32_t value);
  public:

  // uint32 msg_check = 11;
  void clear_msg_check();
  uint32_t msg_check() const;
  void set_msg_check(uint32_t value);
  private:
  uint32_t _internal_msg_check() const;
  void _internal_set_msg_check(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Amessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    uint32_t command_;
    uint32_t type_;
    uint32_t result_;
    uint32_t timeout_;
    uint32_t id_;
    uint32_t data_length_;
    uint32_t data_check_;
    uint32_t reserved_;
    uint32_t msg_check_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IPCMessage_2eproto;
};
// -------------------------------------------------------------------

class info_s final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.info_s) */ {
 public:
  inline info_s() : info_s(nullptr) {}
  ~info_s() override;
  explicit PROTOBUF_CONSTEXPR info_s(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  info_s(const info_s& from);
  info_s(info_s&& from) noexcept
    : info_s() {
    *this = ::std::move(from);
  }

  inline info_s& operator=(const info_s& from) {
    CopyFrom(from);
    return *this;
  }
  inline info_s& operator=(info_s&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const info_s& default_instance() {
    return *internal_default_instance();
  }
  static inline const info_s* internal_default_instance() {
    return reinterpret_cast<const info_s*>(
               &_info_s_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(info_s& a, info_s& b) {
    a.Swap(&b);
  }
  inline void Swap(info_s* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(info_s* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  info_s* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<info_s>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const info_s& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const info_s& from) {
    info_s::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(info_s* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.info_s";
  }
  protected:
  explicit info_s(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:IM.info_s)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IPCMessage_2eproto;
};
// -------------------------------------------------------------------

class deviceinfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.deviceinfo) */ {
 public:
  inline deviceinfo() : deviceinfo(nullptr) {}
  ~deviceinfo() override;
  explicit PROTOBUF_CONSTEXPR deviceinfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deviceinfo(const deviceinfo& from);
  deviceinfo(deviceinfo&& from) noexcept
    : deviceinfo() {
    *this = ::std::move(from);
  }

  inline deviceinfo& operator=(const deviceinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline deviceinfo& operator=(deviceinfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deviceinfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const deviceinfo* internal_default_instance() {
    return reinterpret_cast<const deviceinfo*>(
               &_deviceinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(deviceinfo& a, deviceinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(deviceinfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deviceinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deviceinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deviceinfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deviceinfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const deviceinfo& from) {
    deviceinfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deviceinfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.deviceinfo";
  }
  protected:
  explicit deviceinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kNumFieldNumber = 1,
  };
  // repeated .IM.info_s value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::IM::info_s* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::info_s >*
      mutable_value();
  private:
  const ::IM::info_s& _internal_value(int index) const;
  ::IM::info_s* _internal_add_value();
  public:
  const ::IM::info_s& value(int index) const;
  ::IM::info_s* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::info_s >&
      value() const;

  // uint32 num = 1;
  void clear_num();
  uint32_t num() const;
  void set_num(uint32_t value);
  private:
  uint32_t _internal_num() const;
  void _internal_set_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:IM.deviceinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::info_s > value_;
    uint32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IPCMessage_2eproto;
};
// -------------------------------------------------------------------

class Apacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Apacket) */ {
 public:
  inline Apacket() : Apacket(nullptr) {}
  ~Apacket() override;
  explicit PROTOBUF_CONSTEXPR Apacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Apacket(const Apacket& from);
  Apacket(Apacket&& from) noexcept
    : Apacket() {
    *this = ::std::move(from);
  }

  inline Apacket& operator=(const Apacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Apacket& operator=(Apacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Apacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const Apacket* internal_default_instance() {
    return reinterpret_cast<const Apacket*>(
               &_Apacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Apacket& a, Apacket& b) {
    a.Swap(&b);
  }
  inline void Swap(Apacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Apacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Apacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Apacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Apacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Apacket& from) {
    Apacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Apacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Apacket";
  }
  protected:
  explicit Apacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .IM.Amessage msg = 1;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::IM::Amessage& msg() const;
  PROTOBUF_NODISCARD ::IM::Amessage* release_msg();
  ::IM::Amessage* mutable_msg();
  void set_allocated_msg(::IM::Amessage* msg);
  private:
  const ::IM::Amessage& _internal_msg() const;
  ::IM::Amessage* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::IM::Amessage* msg);
  ::IM::Amessage* unsafe_arena_release_msg();

  // .IM.deviceinfo data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::IM::deviceinfo& data() const;
  PROTOBUF_NODISCARD ::IM::deviceinfo* release_data();
  ::IM::deviceinfo* mutable_data();
  void set_allocated_data(::IM::deviceinfo* data);
  private:
  const ::IM::deviceinfo& _internal_data() const;
  ::IM::deviceinfo* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::IM::deviceinfo* data);
  ::IM::deviceinfo* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:IM.Apacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::IM::Amessage* msg_;
    ::IM::deviceinfo* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IPCMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Amessage

// uint32 command = 1;
inline void Amessage::clear_command() {
  _impl_.command_ = 0u;
}
inline uint32_t Amessage::_internal_command() const {
  return _impl_.command_;
}
inline uint32_t Amessage::command() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.command)
  return _internal_command();
}
inline void Amessage::_internal_set_command(uint32_t value) {
  
  _impl_.command_ = value;
}
inline void Amessage::set_command(uint32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:IM.Amessage.command)
}

// string testname = 2;
inline void Amessage::clear_testname() {
  _impl_.testname_.ClearToEmpty();
}
inline const std::string& Amessage::testname() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.testname)
  return _internal_testname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Amessage::set_testname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.testname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Amessage.testname)
}
inline std::string* Amessage::mutable_testname() {
  std::string* _s = _internal_mutable_testname();
  // @@protoc_insertion_point(field_mutable:IM.Amessage.testname)
  return _s;
}
inline const std::string& Amessage::_internal_testname() const {
  return _impl_.testname_.Get();
}
inline void Amessage::_internal_set_testname(const std::string& value) {
  
  _impl_.testname_.Set(value, GetArenaForAllocation());
}
inline std::string* Amessage::_internal_mutable_testname() {
  
  return _impl_.testname_.Mutable(GetArenaForAllocation());
}
inline std::string* Amessage::release_testname() {
  // @@protoc_insertion_point(field_release:IM.Amessage.testname)
  return _impl_.testname_.Release();
}
inline void Amessage::set_allocated_testname(std::string* testname) {
  if (testname != nullptr) {
    
  } else {
    
  }
  _impl_.testname_.SetAllocated(testname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.testname_.IsDefault()) {
    _impl_.testname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IM.Amessage.testname)
}

// string version = 3;
inline void Amessage::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Amessage::version() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Amessage::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.Amessage.version)
}
inline std::string* Amessage::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:IM.Amessage.version)
  return _s;
}
inline const std::string& Amessage::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Amessage::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Amessage::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* Amessage::release_version() {
  // @@protoc_insertion_point(field_release:IM.Amessage.version)
  return _impl_.version_.Release();
}
inline void Amessage::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IM.Amessage.version)
}

// uint32 type = 4;
inline void Amessage::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Amessage::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Amessage::type() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.type)
  return _internal_type();
}
inline void Amessage::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Amessage::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:IM.Amessage.type)
}

// uint32 result = 5;
inline void Amessage::clear_result() {
  _impl_.result_ = 0u;
}
inline uint32_t Amessage::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t Amessage::result() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.result)
  return _internal_result();
}
inline void Amessage::_internal_set_result(uint32_t value) {
  
  _impl_.result_ = value;
}
inline void Amessage::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:IM.Amessage.result)
}

// uint32 timeout = 6;
inline void Amessage::clear_timeout() {
  _impl_.timeout_ = 0u;
}
inline uint32_t Amessage::_internal_timeout() const {
  return _impl_.timeout_;
}
inline uint32_t Amessage::timeout() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.timeout)
  return _internal_timeout();
}
inline void Amessage::_internal_set_timeout(uint32_t value) {
  
  _impl_.timeout_ = value;
}
inline void Amessage::set_timeout(uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:IM.Amessage.timeout)
}

// uint32 id = 7;
inline void Amessage::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Amessage::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Amessage::id() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.id)
  return _internal_id();
}
inline void Amessage::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Amessage::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IM.Amessage.id)
}

// uint32 data_length = 8;
inline void Amessage::clear_data_length() {
  _impl_.data_length_ = 0u;
}
inline uint32_t Amessage::_internal_data_length() const {
  return _impl_.data_length_;
}
inline uint32_t Amessage::data_length() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.data_length)
  return _internal_data_length();
}
inline void Amessage::_internal_set_data_length(uint32_t value) {
  
  _impl_.data_length_ = value;
}
inline void Amessage::set_data_length(uint32_t value) {
  _internal_set_data_length(value);
  // @@protoc_insertion_point(field_set:IM.Amessage.data_length)
}

// uint32 data_check = 9;
inline void Amessage::clear_data_check() {
  _impl_.data_check_ = 0u;
}
inline uint32_t Amessage::_internal_data_check() const {
  return _impl_.data_check_;
}
inline uint32_t Amessage::data_check() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.data_check)
  return _internal_data_check();
}
inline void Amessage::_internal_set_data_check(uint32_t value) {
  
  _impl_.data_check_ = value;
}
inline void Amessage::set_data_check(uint32_t value) {
  _internal_set_data_check(value);
  // @@protoc_insertion_point(field_set:IM.Amessage.data_check)
}

// uint32 reserved = 10;
inline void Amessage::clear_reserved() {
  _impl_.reserved_ = 0u;
}
inline uint32_t Amessage::_internal_reserved() const {
  return _impl_.reserved_;
}
inline uint32_t Amessage::reserved() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.reserved)
  return _internal_reserved();
}
inline void Amessage::_internal_set_reserved(uint32_t value) {
  
  _impl_.reserved_ = value;
}
inline void Amessage::set_reserved(uint32_t value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:IM.Amessage.reserved)
}

// uint32 msg_check = 11;
inline void Amessage::clear_msg_check() {
  _impl_.msg_check_ = 0u;
}
inline uint32_t Amessage::_internal_msg_check() const {
  return _impl_.msg_check_;
}
inline uint32_t Amessage::msg_check() const {
  // @@protoc_insertion_point(field_get:IM.Amessage.msg_check)
  return _internal_msg_check();
}
inline void Amessage::_internal_set_msg_check(uint32_t value) {
  
  _impl_.msg_check_ = value;
}
inline void Amessage::set_msg_check(uint32_t value) {
  _internal_set_msg_check(value);
  // @@protoc_insertion_point(field_set:IM.Amessage.msg_check)
}

// -------------------------------------------------------------------

// info_s

// string name = 1;
inline void info_s::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& info_s::name() const {
  // @@protoc_insertion_point(field_get:IM.info_s.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void info_s::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.info_s.name)
}
inline std::string* info_s::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:IM.info_s.name)
  return _s;
}
inline const std::string& info_s::_internal_name() const {
  return _impl_.name_.Get();
}
inline void info_s::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* info_s::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* info_s::release_name() {
  // @@protoc_insertion_point(field_release:IM.info_s.name)
  return _impl_.name_.Release();
}
inline void info_s::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IM.info_s.name)
}

// string value = 2;
inline void info_s::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& info_s::value() const {
  // @@protoc_insertion_point(field_get:IM.info_s.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void info_s::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IM.info_s.value)
}
inline std::string* info_s::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:IM.info_s.value)
  return _s;
}
inline const std::string& info_s::_internal_value() const {
  return _impl_.value_.Get();
}
inline void info_s::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* info_s::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* info_s::release_value() {
  // @@protoc_insertion_point(field_release:IM.info_s.value)
  return _impl_.value_.Release();
}
inline void info_s::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IM.info_s.value)
}

// -------------------------------------------------------------------

// deviceinfo

// uint32 num = 1;
inline void deviceinfo::clear_num() {
  _impl_.num_ = 0u;
}
inline uint32_t deviceinfo::_internal_num() const {
  return _impl_.num_;
}
inline uint32_t deviceinfo::num() const {
  // @@protoc_insertion_point(field_get:IM.deviceinfo.num)
  return _internal_num();
}
inline void deviceinfo::_internal_set_num(uint32_t value) {
  
  _impl_.num_ = value;
}
inline void deviceinfo::set_num(uint32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:IM.deviceinfo.num)
}

// repeated .IM.info_s value = 2;
inline int deviceinfo::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int deviceinfo::value_size() const {
  return _internal_value_size();
}
inline void deviceinfo::clear_value() {
  _impl_.value_.Clear();
}
inline ::IM::info_s* deviceinfo::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:IM.deviceinfo.value)
  return _impl_.value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::info_s >*
deviceinfo::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:IM.deviceinfo.value)
  return &_impl_.value_;
}
inline const ::IM::info_s& deviceinfo::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline const ::IM::info_s& deviceinfo::value(int index) const {
  // @@protoc_insertion_point(field_get:IM.deviceinfo.value)
  return _internal_value(index);
}
inline ::IM::info_s* deviceinfo::_internal_add_value() {
  return _impl_.value_.Add();
}
inline ::IM::info_s* deviceinfo::add_value() {
  ::IM::info_s* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:IM.deviceinfo.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::info_s >&
deviceinfo::value() const {
  // @@protoc_insertion_point(field_list:IM.deviceinfo.value)
  return _impl_.value_;
}

// -------------------------------------------------------------------

// Apacket

// .IM.Amessage msg = 1;
inline bool Apacket::_internal_has_msg() const {
  return this != internal_default_instance() && _impl_.msg_ != nullptr;
}
inline bool Apacket::has_msg() const {
  return _internal_has_msg();
}
inline void Apacket::clear_msg() {
  if (GetArenaForAllocation() == nullptr && _impl_.msg_ != nullptr) {
    delete _impl_.msg_;
  }
  _impl_.msg_ = nullptr;
}
inline const ::IM::Amessage& Apacket::_internal_msg() const {
  const ::IM::Amessage* p = _impl_.msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::IM::Amessage&>(
      ::IM::_Amessage_default_instance_);
}
inline const ::IM::Amessage& Apacket::msg() const {
  // @@protoc_insertion_point(field_get:IM.Apacket.msg)
  return _internal_msg();
}
inline void Apacket::unsafe_arena_set_allocated_msg(
    ::IM::Amessage* msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_);
  }
  _impl_.msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.Apacket.msg)
}
inline ::IM::Amessage* Apacket::release_msg() {
  
  ::IM::Amessage* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IM::Amessage* Apacket::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:IM.Apacket.msg)
  
  ::IM::Amessage* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
  return temp;
}
inline ::IM::Amessage* Apacket::_internal_mutable_msg() {
  
  if (_impl_.msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::Amessage>(GetArenaForAllocation());
    _impl_.msg_ = p;
  }
  return _impl_.msg_;
}
inline ::IM::Amessage* Apacket::mutable_msg() {
  ::IM::Amessage* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:IM.Apacket.msg)
  return _msg;
}
inline void Apacket::set_allocated_msg(::IM::Amessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msg_;
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:IM.Apacket.msg)
}

// .IM.deviceinfo data = 2;
inline bool Apacket::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool Apacket::has_data() const {
  return _internal_has_data();
}
inline void Apacket::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
inline const ::IM::deviceinfo& Apacket::_internal_data() const {
  const ::IM::deviceinfo* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::IM::deviceinfo&>(
      ::IM::_deviceinfo_default_instance_);
}
inline const ::IM::deviceinfo& Apacket::data() const {
  // @@protoc_insertion_point(field_get:IM.Apacket.data)
  return _internal_data();
}
inline void Apacket::unsafe_arena_set_allocated_data(
    ::IM::deviceinfo* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.Apacket.data)
}
inline ::IM::deviceinfo* Apacket::release_data() {
  
  ::IM::deviceinfo* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IM::deviceinfo* Apacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:IM.Apacket.data)
  
  ::IM::deviceinfo* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::IM::deviceinfo* Apacket::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::deviceinfo>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::IM::deviceinfo* Apacket::mutable_data() {
  ::IM::deviceinfo* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:IM.Apacket.data)
  return _msg;
}
inline void Apacket::set_allocated_data(::IM::deviceinfo* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:IM.Apacket.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IPCMessage_2eproto
